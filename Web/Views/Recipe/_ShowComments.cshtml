@model List<Web.Models.CommentViewModel>
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer

<style>
    .bottom-text {
        font-family: "Comic Sans MS", cursive, sans-serif;
        font-size: 35px;
        margin-left: 20px;
        padding-right: 40px;
        opacity: 40inherit;
        text-align: right;
    }
</style>

<div class="container">
    <br />
    @* send comment area*@
    @if (ViewData["userRole"].ToString() == "Banned")
    {
        <div>
            <h2 class="bottom-text text-center">@Localizer["comment_blocked"]</h2>
        </div>
    }
    else
    {
        <div class="input-group mb-3">
            <textarea id="commentArea" class="form-control" placeholder="@Localizer["comment_placeholder"]"></textarea>
            <button id="sendCommentButton" class="btn btn-outline-success" data-userId="@ViewData["userId"]" data-userName="@ViewData["userName"]" data-postId="@ViewData["postID"]">@Localizer["comment_send"]</button>
        </div>
    }
    <hr />

    @* all comments to post *@
    <div id="commentContainer">
        @{
            // For showing comments from newest to oldest
            Model.Reverse();
        }
        @foreach (var item in Model)
        {
            <div id="@item.CommentId" name="@item.UserId" data-postId="@ViewData["postID"]">
                <h5>@item.UserName</h5>
                <p>@item.Text</p>
                @if (item.UserId == ViewData["userId"].ToString() || "Admin" == ViewData["userRole"].ToString() || "Manager" == ViewData["userRole"].ToString())
                {
                    <button class="deleteCommentButton btn btn-outline-danger">@Localizer["comment_delete"]</button>
                }
                else
                {
                    <button class="reportCommentButton btn btn-outline-secondary">@Localizer["comment_report"]</button>
                }
                <hr />
            </div>
        }
    </div>
</div>

<script src="~/js/signalr/dist/browser/signalr.js"></script>
<script type="text/javascript">
    "use strict";
    var connection = new signalR.HubConnectionBuilder().withUrl("/commentshub").build();

    connection.start().then(function () { }).catch(function (err) { return console.error(err.toString()); });

    connection.on("ReceiveComment", function (text, userId, userName, postId, commentId) {
        if (@ViewData["PostId"] == postId) {
            CreateComment(text, userId, userName, commentId);
            console.log("Get comment from:'" + userName + "' to post:'" + postId + "'");
        }
    });

    connection.on("RemoveComment", function (commentId, postId) {
        if (@ViewData["PostId"] == postId) {
            $("#" + commentId).empty();
            console.log("Remove comment:'" + commentId + "' from post:'" + postId + "'");
        }
    });

    $('#sendCommentButton').click(function () {
        let text = $('#commentArea').val();
        let userId = $(this).attr('data-userId');
        let userName = $(this).attr('data-userName');
        let postId = $(this).attr('data-postId');

        if (ValidateComment(text) == true) {
            connection.invoke("SendComment", text, userId, userName, parseInt(postId)).catch(function (err) {
                return console.error(err.toString());
            });
        }
    });

    function CreateComment(text, userId, userName, commentId) {
        let commentDiv = document.createElement("div");
        commentDiv.setAttribute("id", commentId);
        commentDiv.setAttribute("name", userId);

        let commentName = document.createElement("h5");
        commentName.innerHTML = userName;
        commentDiv.appendChild(commentName);

        let commentText = document.createElement("p");
        commentText.innerHTML = text;
        commentDiv.appendChild(commentText);

        let buttonAction = document.createElement("button");
        if (userName == "@ViewData["userName"]" || "Admin" == "@ViewData["userRole"]" || "Manager" == "@ViewData["userRole"]") {
            $(buttonAction).on("click", $(buttonAction), function () {
                let postId = "@ViewData["postId"]";
                let commentId = $(this).parent().attr("id");
                let targetId = $(this).parent().attr("name");
                connection.invoke("DeleteComment", parseInt(commentId), parseInt(postId), targetId).catch(function (err) {
                    return console.error(err.toString());
                });
            });
            buttonAction.setAttribute("class", "btn btn-outline-danger");
            buttonAction.innerHTML = "@Localizer["comment_delete"]";
        }
        else {
            $(buttonAction).on("click", $(buttonAction), function () {
                let commentId = $(this).parent().attr("id");
                let targetId = $(this).parent().attr("name");
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("ReportComment", "Recipe")',
                    dataType: 'html',
                    data: { 'commentId': commentId, 'userId': "@ViewData["userId"]", 'targetId': targetId },
                    success: function (result) {
                        if (result == "true") {
                            console.log("Make report to comment:'" + commentId + "' by user '" + "@ViewData["userName"]" + "';");
                            alert("@Localizer["report_add"]");
                        }
                        else {
                            console.log("Report to comment:'" + commentId + "' by user '" + "@ViewData["userName"]" + "' already exists;");
                            alert("@Localizer["report_exist"]");
                        }
                    },
                    error: function (err) {
                        console.log(err);
                    }
                });
            });
            buttonAction.setAttribute("class", "btn btn-outline-secondary");
            buttonAction.innerHTML = "@Localizer["comment_report"]";
        }
        commentDiv.appendChild(buttonAction);

        commentDiv.appendChild(document.createElement("hr"));

        $('#commentContainer').prepend(commentDiv);
    }
    function ValidateComment(text) {
        if (text == null || text.length < 5) {
            alert("@Localizer["comment_wrong"]");
            return false;
        }
        return true;
    }

    $('.deleteCommentButton').click(function () {
        let postId = "@ViewData["postId"]";
        let commentId = $(this).parent().attr("id");
        let targetId = $(this).parent().attr("name");
        connection.invoke("DeleteComment", parseInt(commentId), parseInt(postId), targetId).catch(function (err) {
            return console.error(err.toString());
        });
    });
    $('.reportCommentButton').click(function () {
        let commentId = $(this).parent().attr("id");
        let targetId = $(this).parent().attr("name");
        $.ajax({
            type: 'POST',
            url: '@Url.Action("ReportComment", "Recipe")',
            dataType: 'html',
            data: { 'commentId': commentId, 'userId': "@ViewData["userId"]", 'targetId': targetId },
            success: function (result) {
                if (result == "true") {
                    console.log("Make report to comment:'" + commentId + "' by user '" + "@ViewData["userName"]" + "';");
                    alert("@Localizer["report_add"]");
                }
                else {
                    console.log("Report to comment:'" + commentId + "' by user '" + "@ViewData["userName"]" + "' already exists;");
                    alert("@Localizer["report_exist"]");
                }
            },
            error: function (err) {
                console.log(err);
            }
        });
    });
</script>




